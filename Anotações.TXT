01 - Baixar Spring Tools Suite  e  o Postman
02 - O banco é postgresql
03 - Após download extraimos o spring e copiamos ele (sts-4.8.0.RELEASE) para o C:/

OBS: TEMOS QUE BAIXAR O MAVEN TAMBÉM, O BINÁRIO DELE: https://maven.apache.org/download.cgi
NO WINDOWS: EDITAR VARIÁVEIS DE AMBIENTE
EXTRAIMOS O MAVEN E SALVAMOS ELE NO C:/ IGUAL FIZEMOS COM O SPRING
AGORA VAMOS CRIAR 1 VARIÁVEL DE AMBIENTE
VARIÁVEIS DO SISTEMA/NOVO
NOME DA VARIÁVEL: MAVEN_HOME
VALOR DA VARIÁVEL: C:\apache-maven-3.6.3

AGORA EM PATH/EDITAR/NOVO   AÍ DIGITAMOS: %MAVEN_HOME%\bin



04 - Criando 1º projeto:
A- new
B- spring starter project
C- Nome projeto: cursospringrestapi
D- Group: curso.api.rest
E- Type: Maven
F- Java Version: 11
G- Packaging: war
H- Description: Curso API REST Spring Boot
I- Package: curso.api.rest
J- NEXT
K- Escolhemos: Spring Data JPA, Rest Repositories e Web
L- NEXT
M- FINISH

05 - Adicionar dependencia postgres no pom:
<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>9.2-1003-jdbc4</version>
</dependency>

06- Adicionar o spring boot starter jdbc no pom:
<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jdbc</artifactId>
    <version>2.0.3.RELEASE</version>
</dependency>

07 - DevTools:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <scope>runtime</scope>
</dependency>


08 - Vamos em src/main/resources
09 - application.properties
10 - AQUI CONFIGURAMOS O BANCO
11 - Abrimos o pgAdmin e criamos o banco: curso-api-rest-spring





12 - Fazemos a configuração do banco no application.properties, ele ficará assim:

spring.datasource.url=jdbc:postgresql://localhost:5432/curso-api-rest-spring
spring.datasource.username=postgres
spring.datasource.password=123456
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

Obs: curso-api-rest-spring (nome banco criado no postgres anteriormente)








13 - Dentro de src/main/java criamos o pacote: curso.api.rest.model
14 - Abrimos o pacote curso.api.rest, la tem a classe Application, acrescentamos a notação:
@EntityScan(basePackages = {"curso.api.rest.model"})
@ComponentScan(basePackages = {"curso.*"}) 

15 - Dentro de src/main/java criamos o pacote: curso.api.rest.repository
16 - No Application acrescentamos:
@EnableJpaRepositories(basePackages = {"curso.api.rest.repository"})
@EnableTransactionManagement
@EnableWebMvc
@EnableRestController
@AutoConfiguration

16 - Startando o projeto:
Abrir a classe Application no pacote curso.api.rest, lá tem o método main pra startar o projeto.
Botão direito Run as Spring Application







17 - Agora vamos criar a classe Usuario no pacote do Model (PARA CRIAR A TABELA USUARIO NO BANCO)


package curso.api.rest.model;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Usuario implements Serializable {
	
	
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	
	private String login;
	private String senha;
	private String nome;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getLogin() {
		return login;
	}
	public void setLogin(String login) {
		this.login = login;
	}
	public String getSenha() {
		return senha;
	}
	public void setSenha(String senha) {
		this.senha = senha;
	}
	public String getNome() {
		return nome;
	}
	public void setNome(String nome) {
		this.nome = nome;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Usuario other = (Usuario) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
		

}


OBS: Após criar, rodamos e será criada a tabela usuario no banco









18 - Agora criamos o pacote curso.api.rest.controller
19 - Dentro do controller criamos a classe IndexController:

package curso.api.rest.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(value = "/usuario")
public class IndexController {
	
	@GetMapping(value = "/", produces = "application/json")
	public ResponseEntity init(@RequestParam(value = "nome") String nome) {

     System.out.println("Parâmetro recebido " + nome);

return new ResponseEntity("Olá Usuário REST Spring Boot seu nome é: " + nome, HttpStatus.OK);
	}

}

OBS: ESSA CLASSE SERVE PARA FAZER 1 TESTE. QUANDO STARTAMOS O PROJETO, ENTRAMOS NO NAVEGADOR
E DIGITAMOS: localhost:8080/usuario/?nome=Ualzem       
VAI APARECER A MENSAGEM:  Olá Usuário REST Spring Boot seu nome é: Ualzem

QUANDO VAMOS PASSAR PARÂMETRO NO NAVEGADOR DIGITAMOS: "?" E EM SEGUIDA O PARÂMETRO



----------------------------- USANDO O POSTMAN -------------------------------------
01 - Após instalação, digitamos nossa url(http://localhost:8080/usuario/) e send, para ver todos os usuarios,
LEMBRANDO QUE TEMOS Q STARTAR O PROJETO SPRING ANTES.






------------------      COMO GERAR O "JAR" E O "WAR" DO PROJETO: ------------------------------------------------
  
     USAR PREFERENCIALMENTE O JAVA 1.8  JDK E JRE

BAIXAR O JRE 1.8 - https://www.blogdainformatica.com.br/download/java-jre-1-8-0_101/
BAIXAR O JDK 1.8 - https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html

01 - Ir no pom e verificar:
<properties>
		<java.version>1.8</java.version>
	</properties>

  Ver nas variáveis de ambiente se no JAVA_HOME está essa mesma versão do jdk.
 Ver nas variáveis de ambiente se no JRE_HOME está essa mesma versão do jre.

Para termos certeza, vamos no cmd e digitamos: java -version

 Vamos no menu window/preferences/digitamos java - selecionamos compiler e selecionamos java 1.8

Onde digitamos java agora digitaremos jre e  selecionaremos 
execution enviroment/ clicamos em java SE 1.8/ marcamos o q aparece do outro lado

Vamos em Instaled JRE:
em JRE home:  SELECIONAMOS O ENDEREÇO DO NOSSO JDK: C:\Program Files\Java\jdk1.8.0_101
em JRE name: COLOCAMOS O NOME jdk



02 - Vamos nas properties do nosso projeto e conferimos o compiler se está na mesma versão também
OBS: SE ESTIVER USANDO O JAVA 1.8 TAMBÉ TEM QUE USAR O JRE 1.8

Vamos no Java Build path - JRE system library (clicamos nele) / edit/ marcamos ALTERNATIVE JRE jdk


03 - No Project Facets tambem tem que marcar o Java 1.8 - DO OUTRO LADO EM RUNTIMES SELECIONA jdk

04 - AGORA VAMOS NO pom.xml  CLICAMOS COM BOTÃO DIREITO/RUN AS/Run Configurations
selecionamos nossa classe main na esquerda(cursospringrestapi - CursospringrestapiApplication)
Do lado direito em Main Type tem que estar assim: curso.api.rest.CursospringrestapiApplication
Do lado direito em Project te estar: cursospringrestapi
NO MENU SUPERIOR SELECIONAMOS JRE/Alternative JRE/jdk

05 - PRA FINALIZAR AS CONFIGURAÇÕES DAMOS UM Clean no projeto.

    06 - CRIANDO O JAR:
A - TUDO QUE FOR GERADO DO MAVEN FICARÁ NA PASTA target DO NOSSO PROJETO
B - CLICAMOS COM O BOTÃO DIREITO NESSA PASTA SELECIONAMOS properties 
C - CLICAMOS EM RESOURCE E VEREMOS SUA LOCALIZAÇÃO EM Location:
(NO MEU CASO NO NOTE É: F:\JDEV-API-RESTFUL-SPRINGBOOT\Workspace\cursospringrestapi\target)
D - TEM UM SIMBOLOZINHO DEPOIS DO ENDEREÇO(Show in System Explorer), clicando nele vamos direto pra pasta
E - PEGAMOS O ENDEREÇO NO BROWSER DA PASTA: F:\JDEV-API-RESTFUL-SPRINGBOOT\Workspace\cursospringrestapi
E COPIAMOS ESSE ENDEREÇO.
F - ABRIMOS O NOSSO cmd
G - DIGITAMOS a letra do nosso projeto(no meu é F:) 
H - AGORA DIGITAMOS cd e colamos o endereço da pasta (Assim entramos dentro dela pelo cmd)
I - AGORA DIGITAMOS O COMANDO PARA GERAR O ARQUIVO JAR: ANTES NO pom.xml VER SE TEM A TAG <packaging>war</packaging>
J - VAMOS MUDAR : <packaging>war</packaging>  PARA: <packaging>jar</packaging>
K - JÁ DENTRO DA NOSSA PASTA NO CMD DIGITAMOS: mvn package  DAMOS ENTER E ELE VAI GERAR
L -  NO FINAL TEM QUE DAR BUILD SUCESS
M - ENTRAMOS NA PASTA target PELO CMD: cd target
N - AGORA DENTRO DO target DIGITAMOS NO CMD:  java -jar E O 
NOME DO NOSSO JAR: java -jar cursospringrestapi-0.0.1-SNAPSHOT.jar  (ENTER)

O - NO BROWSER DA INTERNET DIGITAMOS: http://localhost:8080/cursospringrestapi/usuario/
P - SE RODAR COM O SPRING FECHADO, FUNCIONOU.


-------------------------------------- GERANDO UM WAR ----------------------------------------------

PARA CRIAR O WAR TEMOS QUE AJUSTAR 2 COISAS:

1º ADICIONAR 1 DEPENDENCIA NO pom.xml:
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId> spring-boot-starter-tomcat </artifactId>
</dependency>

2º Vamos no nosso arquivo main do projeto e adicionamos 1 extends nele ficando assim:
public class CursospringrestapiApplication extends SpringBootServletInitializer




01 - VAMOS NO pom.xml E MUDAMOS:<packaging>jar</packaging>  PARA: <packaging>War</packaging>
02 - NO cmd ENTRAMOS NO HD DO PROJETO: F:
03 - ENTRAMOS NA PASTA DO PROJETO: F:\JDEV-API-RESTFUL-SPRINGBOOT\Workspace2\cursospringrestapi
04 - DIGITAMOS O COMANDO PARA CRIAR O WAR: mvn package (ENTER)
05 - AO FINAL TEM QUE DAR BUILD SUCESS
06 - AGORA VAMOS RODAR ELE NO SERVIDOR DO Apache Tomcat QUE TEM QUE ESTAR CO C:/
07 - ENTRAMOS NO bin DO Apache
08 - CLICAMOS EM STARTUP
09 - CONFERIMOS SE STARTOU, NO BROWSER DA INTERNET: http://localhost:8080/   
10 -  TEM Q APARECER A PAGINA DO APACHE TOMCAT - AI DAMOS shutdown nele
11 - AGORA VAMOS NO target E COPIAMOS O NOSSO ARQUIVO WAR GERADO
12 - VAMOS NO APACHE/webapps
13 - COLAMOS ELE LÁ
14 - ALTERAMOS SEU NOME: cursospringrestapi-0.0.1-SNAPSHOT.war  PARA: cursospringrestapi.war
15 - STARTAMOS O APACHE NOVAMENTE
16 - AGORA RODAMOS NO BROWSER: localhost:8080/cursospringrestapi  
E PARA VER TODOS OS CADASTROS: localhost:8080/cursospringrestapi/usuario



